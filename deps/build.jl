using BinaryProvider

const JLCXX_DIR = get(ENV, "JLCXX_DIR", "")
const verbose = "--verbose" in ARGS
const prefix = Prefix(JLCXX_DIR == "" ? get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")) : JLCXX_DIR)

products = Product[
    LibraryProduct(prefix, "libcxxwrap_julia", :libcxxwrap_julia),
    LibraryProduct(prefix, "libcxxwrap_julia_stl", :libcxxwrap_julia_stl)
]

supported = true

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaInterop/libcxxwrap-julia/releases/download/v0.6.3"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Windows(:i686, compiler_abi=CompilerABI(:gcc7, :cxx11)) => ("$bin_prefix/libcxxwrap-julia-1.0.v0.6.3.i686-w64-mingw32-gcc7-cxx11.tar.gz", "2ca6b8dc6b61b63119aa55467e148318729a861f624adfe0616b1a60c7011b18"),
    Windows(:i686, compiler_abi=CompilerABI(:gcc8, :cxx11)) => ("$bin_prefix/libcxxwrap-julia-1.0.v0.6.3.i686-w64-mingw32-gcc8-cxx11.tar.gz", "54dffaf6e64b38a0fb8d4d340c70cae501c72fe6c4b57f3150f1621d4f443ec1"),
    MacOS(:x86_64) => ("$bin_prefix/libcxxwrap-julia-1.0.v0.6.3.x86_64-apple-darwin14.tar.gz", "89bb06c8471b31ad64dfa01aa7f07a92dd113e14f433032254e179d913a93ff7"),
    Linux(:x86_64, libc=:glibc, compiler_abi=CompilerABI(:gcc7, :cxx11)) => ("$bin_prefix/libcxxwrap-julia-1.0.v0.6.3.x86_64-linux-gnu-gcc7-cxx11.tar.gz", "5f5295691bed268212706b972f69e405f776c0a10bade8e2eff47a2db280a39f"),
    Linux(:x86_64, libc=:glibc, compiler_abi=CompilerABI(:gcc8, :cxx11)) => ("$bin_prefix/libcxxwrap-julia-1.0.v0.6.3.x86_64-linux-gnu-gcc8-cxx11.tar.gz", "d8a5ffc95fc221b48705827e88a63fc1179ce913bc5b96c7e9a98ebe8cd7dc8a"),
    Windows(:x86_64, compiler_abi=CompilerABI(:gcc7, :cxx11)) => ("$bin_prefix/libcxxwrap-julia-1.0.v0.6.3.x86_64-w64-mingw32-gcc7-cxx11.tar.gz", "4d9515da5f77c2e675900935b13be55537410e7db69adf7ab60cf9ac2592f479"),
    Windows(:x86_64, compiler_abi=CompilerABI(:gcc8, :cxx11)) => ("$bin_prefix/libcxxwrap-julia-1.0.v0.6.3.x86_64-w64-mingw32-gcc8-cxx11.tar.gz", "4b1944780c153c264ceb5adc05c8d82366ff6d30d2b13e598e18e21e91d2737e"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
transform_platform(platform) = typeof(platform)(platform.arch;libc=platform.libc,call_abi=platform.call_abi,compiler_abi=CompilerABI(max(platform.compiler_abi.gcc_version,:gcc7),:cxx11))
transform_platform(platform::MacOS) = MacOS(:x86_64)
if JLCXX_DIR == ""
    platform = transform_platform(platform_key_abi())
    if haskey(download_info, platform)
        if !supported
            error("Julia version $VERSION is not supported for binary download. Please build libcxxwrap-julia from source and set the JLCXX_DIR environment variable to the build dir or installation prefix.")
        end
        url, tarball_hash = download_info[platform]
        if unsatisfied || !isinstalled(url, tarball_hash; prefix=prefix)
            # Download and install binaries
            install(url, tarball_hash; prefix=prefix, force=true, verbose=verbose,ignore_platform=true)
        end
    elseif unsatisfied
        # If we don't have a BinaryProvider-compatible .tar.gz to download, complain.
        # Alternatively, you could attempt to install from a separate provider,
        # build from source or something even more ambitious here.
        error("Your platform $(triplet(platform)) is not supported by this package!")
    end
else
    if unsatisfied
        error("The required libraries were not found in the provided JLCXX_DIR directory $JLCXX_DIR")
    end
end

write_deps_file(joinpath(@__DIR__, "deps.jl"), products)
