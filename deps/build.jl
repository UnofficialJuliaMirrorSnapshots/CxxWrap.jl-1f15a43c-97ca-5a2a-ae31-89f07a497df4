using BinaryProvider

const JLCXX_DIR = get(ENV, "JLCXX_DIR", "")
const verbose = "--verbose" in ARGS
const prefix = Prefix(JLCXX_DIR == "" ? get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")) : JLCXX_DIR)

products = Product[
    LibraryProduct(prefix, "libcxxwrap_julia", :libcxxwrap_julia),
    LibraryProduct(prefix, "libcxxwrap_julia_stl", :libcxxwrap_julia_stl)
]

supported = true

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaInterop/libcxxwrap-julia/releases/download/v0.6.2"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Windows(:i686, compiler_abi=CompilerABI(:gcc7, :cxx11)) => ("$bin_prefix/libcxxwrap-julia-1.0.v0.6.2.i686-w64-mingw32-gcc7-cxx11.tar.gz", "b43351b30cb469363894cfa4b7d15aed56a6457513e544658a236597cb185db2"),
    Windows(:i686, compiler_abi=CompilerABI(:gcc8, :cxx11)) => ("$bin_prefix/libcxxwrap-julia-1.0.v0.6.2.i686-w64-mingw32-gcc8-cxx11.tar.gz", "025c32ebc0e1edb021ac9a78533cc2a7f3108a0c327683d5bc118a768ac02241"),
    MacOS(:x86_64) => ("$bin_prefix/libcxxwrap-julia-1.0.v0.6.2.x86_64-apple-darwin14.tar.gz", "f65a4ad7d8df34ea2bbcfb3b007bb7e0fb329fd4f3976cd3f22f3998985c80d1"),
    Linux(:x86_64, libc=:glibc, compiler_abi=CompilerABI(:gcc7, :cxx11)) => ("$bin_prefix/libcxxwrap-julia-1.0.v0.6.2.x86_64-linux-gnu-gcc7-cxx11.tar.gz", "e3b2b22ba5fa52d10b8f30ed3459aa27df2cc4c219f458cf419d8defe6daf403"),
    Linux(:x86_64, libc=:glibc, compiler_abi=CompilerABI(:gcc8, :cxx11)) => ("$bin_prefix/libcxxwrap-julia-1.0.v0.6.2.x86_64-linux-gnu-gcc8-cxx11.tar.gz", "583d6f3318c376a58dbdd53563797cc1961ffcb320bd6c8f8d00cfc6ac968a9c"),
    Windows(:x86_64, compiler_abi=CompilerABI(:gcc7, :cxx11)) => ("$bin_prefix/libcxxwrap-julia-1.0.v0.6.2.x86_64-w64-mingw32-gcc7-cxx11.tar.gz", "73a6a47a023f7f6f55d46666d61f92225a9ba102e9931e8c922badde718cd257"),
    Windows(:x86_64, compiler_abi=CompilerABI(:gcc8, :cxx11)) => ("$bin_prefix/libcxxwrap-julia-1.0.v0.6.2.x86_64-w64-mingw32-gcc8-cxx11.tar.gz", "15f4e9f1c075ab144cef88ca7efe3613ed550463bf4fc7241ee339bb4921c168"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
transform_platform(platform) = typeof(platform)(platform.arch;libc=platform.libc,call_abi=platform.call_abi,compiler_abi=CompilerABI(max(platform.compiler_abi.gcc_version,:gcc7),:cxx11))
transform_platform(platform::MacOS) = MacOS(:x86_64)
if JLCXX_DIR == ""
    platform = transform_platform(platform_key_abi())
    if haskey(download_info, platform)
        if !supported
            error("Julia version $VERSION is not supported for binary download. Please build libcxxwrap-julia from source and set the JLCXX_DIR environment variable to the build dir or installation prefix.")
        end
        url, tarball_hash = download_info[platform]
        if unsatisfied || !isinstalled(url, tarball_hash; prefix=prefix)
            # Download and install binaries
            install(url, tarball_hash; prefix=prefix, force=true, verbose=verbose,ignore_platform=true)
        end
    elseif unsatisfied
        # If we don't have a BinaryProvider-compatible .tar.gz to download, complain.
        # Alternatively, you could attempt to install from a separate provider,
        # build from source or something even more ambitious here.
        error("Your platform $(triplet(platform)) is not supported by this package!")
    end
else
    if unsatisfied
        error("The required libraries were not found in the provided JLCXX_DIR directory $JLCXX_DIR")
    end
end

write_deps_file(joinpath(@__DIR__, "deps.jl"), products)
