using BinaryProvider

const JLCXX_DIR = get(ENV, "JLCXX_DIR", "")
const verbose = "--verbose" in ARGS
const prefix = Prefix(JLCXX_DIR == "" ? get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")) : JLCXX_DIR)

products = Product[
    LibraryProduct(prefix, "libcxxwrap_julia", :libcxxwrap_julia)
]

supported = true

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaInterop/libcxxwrap-julia/releases/download/v0.5.1"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Windows(:i686, compiler_abi=CompilerABI(:gcc7, :cxx11)) => ("$bin_prefix/libcxxwrap-julia-1.0.v0.5.1.i686-w64-mingw32-gcc7-cxx11.tar.gz", "8734601b9ecb1eea38096a322aedba6021423567ed00d5a1bfd0447dd9af40e7"),
    Windows(:i686, compiler_abi=CompilerABI(:gcc8, :cxx11)) => ("$bin_prefix/libcxxwrap-julia-1.0.v0.5.1.i686-w64-mingw32-gcc8-cxx11.tar.gz", "6c74b8215f0d7aa7cea0df60185bb75d48ea4cdaae58347c78666d5185dafbc8"),
    MacOS(:x86_64) => ("$bin_prefix/libcxxwrap-julia-1.0.v0.5.1.x86_64-apple-darwin14.tar.gz", "5063cbc9389078a3d968fac92e44071a50d6102725b1abeb64ab3221bb4cd31b"),
    Linux(:x86_64, libc=:glibc, compiler_abi=CompilerABI(:gcc7, :cxx11)) => ("$bin_prefix/libcxxwrap-julia-1.0.v0.5.1.x86_64-linux-gnu-gcc7-cxx11.tar.gz", "07882f462473eccc5e2a0412f39471252e890c1427cd3a124f0371c794ded50f"),
    Linux(:x86_64, libc=:glibc, compiler_abi=CompilerABI(:gcc8, :cxx11)) => ("$bin_prefix/libcxxwrap-julia-1.0.v0.5.1.x86_64-linux-gnu-gcc8-cxx11.tar.gz", "0eafa498c6e79ee8de046e07944d06c176fb379a6e11f152d33aabc6a108b40c"),
    Windows(:x86_64, compiler_abi=CompilerABI(:gcc7, :cxx11)) => ("$bin_prefix/libcxxwrap-julia-1.0.v0.5.1.x86_64-w64-mingw32-gcc7-cxx11.tar.gz", "ca1df9388a586c60e97a4bdfaac956614ad3097fe0f7cd57c3ea50b32de500ce"),
    Windows(:x86_64, compiler_abi=CompilerABI(:gcc8, :cxx11)) => ("$bin_prefix/libcxxwrap-julia-1.0.v0.5.1.x86_64-w64-mingw32-gcc8-cxx11.tar.gz", "d3fdd5c84a5e2fd135f55589820a88f8c145a48047ac87041be770d31c8efed6"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
transform_platform(platform) = typeof(platform)(platform.arch;libc=platform.libc,call_abi=platform.call_abi,compiler_abi=CompilerABI(max(platform.compiler_abi.gcc_version,:gcc7),:cxx11))
transform_platform(platform::MacOS) = MacOS(:x86_64)
if JLCXX_DIR == ""
    platform = transform_platform(platform_key_abi())
    if haskey(download_info, platform)
        if !supported
            error("Julia version $VERSION is not supported for binary download. Please build libcxxwrap-julia from source and set the JLCXX_DIR environment variable to the build dir or installation prefix.")
        end
        url, tarball_hash = download_info[platform]
        if unsatisfied || !isinstalled(url, tarball_hash; prefix=prefix)
            # Download and install binaries
            install(url, tarball_hash; prefix=prefix, force=true, verbose=verbose,ignore_platform=true)
        end
    elseif unsatisfied
        # If we don't have a BinaryProvider-compatible .tar.gz to download, complain.
        # Alternatively, you could attempt to install from a separate provider,
        # build from source or something even more ambitious here.
        error("Your platform $(triplet(platform)) is not supported by this package!")
    end
else
    if unsatisfied
        error("The libcxxwrap-julia library was not found in the provided JLCXX_DIR directory $JLCXX_DIR")
    end
end

write_deps_file(joinpath(@__DIR__, "deps.jl"), products)
